package assignments;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class SortingString {
//	public static void main(String[] args) {
//        Scanner scanner = new Scanner(System.in);
//
//        // Take input from the command line
//        System.out.println("Enter a sentence:");
//        String inputSentence = scanner.nextLine();
//
//        // Process the input sentence
//        StringBuilder sortedSentence=new StringBuilder(sortString(inputSentence));
//       
//        // Display the sorted sentence
//        System.out.println("Sorted Sentence: " + sortedSentence);
//    }
//
//    private static String sortString(String input) {
//        // Split the input sentence into an array of words
//        String[] words = input.split("\\s+");
//
//        // Sort the array based on character length and occurrences of a character
//        Arrays.sort(words, (a, b) -> {
//        	
////        	System.out.println(b+"   ");
//            int lengthComparison = Integer.compare(a.length(), b.length());
//            if (lengthComparison != 0) {
//                return lengthComparison;
//            } else {
//                // If lengths are the same, sort based on the number of occurrences of a character
//                Map<Character, Integer> charCountA = getCharacterCountMap(a);
//                Map<Character, Integer> charCountB = getCharacterCountMap(b);
//
//                int charCountComparison = Integer.compare(charCountA.size(), charCountB.size());
//                if (charCountComparison != 0) {
//                    return charCountComparison;
//                }
//
//                // If both lengths and char counts are the same, use lexicographical order
//                return a.compareTo(b);
//            }
//        });
//
//        // Join the sorted words back into a sentence
//        return String.join(" ", words);
//    }
//
//    private static Map<Character, Integer> getCharacterCountMap(String word) {
//        Map<Character, Integer> charCountMap = new HashMap<>();
//        for (char c : word.toCharArray()) {
//            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
//        }
//        return charCountMap;
//    }
	

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter a string:");
        String inputString = scanner.nextLine();

//        String sortedString = sortString(inputString);
        for(String s:sortString(inputString)) {
        	
        }

        System.out.println("Sorted String: " + sortedString);
    }

    private static String sortString(String inputString) {
        String[] words = inputString.split("\\s+");
//        System.out.println(words.length);
       
        
        Arrays.sort(words, Comparator.comparingInt(String::length).thenComparing(SortingString::charOccurrences));
        return String.join(" ", words);
    }

    private static int charOccurrences(String word) {
        Map<Character, Integer> charCountMap = new HashMap<>();

        for (char c : word.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }

        int maxOccurrences = 0;
//        System.out.println(charCountMap);
        for (int count : charCountMap.values()) {
            if (count > maxOccurrences) {
                maxOccurrences = count;
            }
        }
//System.out.println(maxOccurrences);
        return maxOccurrences;
    }
	
	
}
